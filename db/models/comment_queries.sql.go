// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comment_queries.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const commentAdd = `-- name: CommentAdd :one
insert into comments (id, content, post_id, created_by_id, hierarchy_id, parent_comment_id)
values ($1, $2, $3, $4, $5, $6)
returning id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at
`

type CommentAddParams struct {
	ID              uuid.UUID
	Content         string
	PostID          uuid.UUID
	CreatedByID     uuid.UUID
	HierarchyID     uuid.UUID
	ParentCommentID pgtype.UUID
}

func (q *Queries) CommentAdd(ctx context.Context, arg CommentAddParams) (Comment, error) {
	row := q.db.QueryRow(ctx, commentAdd,
		arg.ID,
		arg.Content,
		arg.PostID,
		arg.CreatedByID,
		arg.HierarchyID,
		arg.ParentCommentID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.LikesCount,
		&i.CreatedByID,
		&i.ParentCommentID,
		&i.HierarchyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const commentAddReply = `-- name: CommentAddReply :one
with parent_comment_hierarchy_id as (
  select hierarchy_id from comments
  where id = $5
)
insert into comments (id, content, post_id, created_by_id, hierarchy_id, parent_comment_id)
values ($1, $2, $3, $4, (select hierarchy_id from parent_comment_hierarchy_id), $5)
returning id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at
`

type CommentAddReplyParams struct {
	ID              uuid.UUID
	Content         string
	PostID          uuid.UUID
	CreatedByID     uuid.UUID
	ParentCommentID pgtype.UUID
}

func (q *Queries) CommentAddReply(ctx context.Context, arg CommentAddReplyParams) (Comment, error) {
	row := q.db.QueryRow(ctx, commentAddReply,
		arg.ID,
		arg.Content,
		arg.PostID,
		arg.CreatedByID,
		arg.ParentCommentID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.LikesCount,
		&i.CreatedByID,
		&i.ParentCommentID,
		&i.HierarchyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const commentDelete = `-- name: CommentDelete :one
update comments
set deleted_at = now()
where id = $1
returning id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at
`

func (q *Queries) CommentDelete(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRow(ctx, commentDelete, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.LikesCount,
		&i.CreatedByID,
		&i.ParentCommentID,
		&i.HierarchyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const commentLike = `-- name: CommentLike :one
with increment_like_count as (
  update comments
  set likes_count = likes_count + 1
  where id = $1
  returning id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at
)
insert into comment_likes (comment_id, user_id)
values ($1, $2)
returning (select id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at from increment_like_count)
`

type CommentLikeParams struct {
	CommentID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) CommentLike(ctx context.Context, arg CommentLikeParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, commentLike, arg.CommentID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const commentUpdate = `-- name: CommentUpdate :one
update comments
set content = $2, updated_at = now()
where id = $1
returning id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at
`

type CommentUpdateParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) CommentUpdate(ctx context.Context, arg CommentUpdateParams) (Comment, error) {
	row := q.db.QueryRow(ctx, commentUpdate, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.LikesCount,
		&i.CreatedByID,
		&i.ParentCommentID,
		&i.HierarchyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const commentsByPostId = `-- name: CommentsByPostId :many
select id, content, post_id, likes_count, created_by_id, parent_comment_id, hierarchy_id, created_at, updated_at, deleted_at from comments
where post_id = $1
order by created_at
limit $2
offset $3
`

type CommentsByPostIdParams struct {
	PostID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) CommentsByPostId(ctx context.Context, arg CommentsByPostIdParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, commentsByPostId, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.PostID,
			&i.LikesCount,
			&i.CreatedByID,
			&i.ParentCommentID,
			&i.HierarchyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
