// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post_queries.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const postCreate = `-- name: PostCreate :one
insert into posts (id, title, content, created_by_id)
values ($1, $2, $3, $4)
returning id, title, content, created_by_id, comments_count, created_at, updated_at, deleted_at
`

type PostCreateParams struct {
	ID          uuid.UUID
	Title       string
	Content     string
	CreatedByID uuid.UUID
}

func (q *Queries) PostCreate(ctx context.Context, arg PostCreateParams) (Post, error) {
	row := q.db.QueryRow(ctx, postCreate,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.CreatedByID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedByID,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const postDelete = `-- name: PostDelete :one
update posts
set deleted_at = now()
where id = $1
returning id, title, content, created_by_id, comments_count, created_at, updated_at, deleted_at
`

func (q *Queries) PostDelete(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, postDelete, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedByID,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const postUpdate = `-- name: PostUpdate :one
update posts
set title = $2, content = $3, updated_at = now()
where id = $1
returning id, title, content, created_by_id, comments_count, created_at, updated_at, deleted_at
`

type PostUpdateParams struct {
	ID      uuid.UUID
	Title   string
	Content string
}

func (q *Queries) PostUpdate(ctx context.Context, arg PostUpdateParams) (Post, error) {
	row := q.db.QueryRow(ctx, postUpdate, arg.ID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedByID,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const postsList = `-- name: PostsList :many
select id, title, content, created_by_id, comments_count, created_at, updated_at, deleted_at from posts
order by created_at
limit $1
offset $2
`

type PostsListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) PostsList(ctx context.Context, arg PostsListParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, postsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedByID,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
