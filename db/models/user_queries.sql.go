// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_queries.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const userByEmail = `-- name: UserByEmail :one
select id, email, password, role from users
where email = $1
limit 1
`

func (q *Queries) UserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, userByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const userByID = `-- name: UserByID :one
select id, email, password, role from users
where id = $1
limit 1
`

func (q *Queries) UserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const userCreate = `-- name: UserCreate :one
insert into users (id, email, password, role)
values ($1, $2, $3, $4)
returning id, email, password, role
`

type UserCreateParams struct {
	ID       uuid.UUID
	Email    string
	Password pgtype.Text
	Role     string
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (User, error) {
	row := q.db.QueryRow(ctx, userCreate,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :one
delete from users
where id = $1
returning id, email, password, role
`

func (q *Queries) UserDelete(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, userDelete, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const userList = `-- name: UserList :many
select id, email, password, role from users
limit $1
offset $2
`

type UserListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) UserList(ctx context.Context, arg UserListParams) ([]User, error) {
	rows, err := q.db.Query(ctx, userList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdate = `-- name: UserUpdate :one
update users
set role = $2, password = $3
where id = $1
returning id, email, password, role
`

type UserUpdateParams struct {
	ID       uuid.UUID
	Role     string
	Password pgtype.Text
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, userUpdate, arg.ID, arg.Role, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}
